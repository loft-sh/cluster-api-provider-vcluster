name: Release

on:
  release:
    types: [published]

jobs:
  publish-capi-yamls:
    if: startsWith(github.ref, 'refs/tags/v') == true
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - id: get_version
        run: |
          RELEASE_VERSION=$(echo $GITHUB_REF | sed -nE 's!refs/tags/v!!p')
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: false
      - name: Prepare all release files for the provider
        run: |
          make release TAG=$RELEASE_VERSION
        env:
          RELEASE_VERSION: ${{ steps.get_version.outputs.release_version }}
      - name: Save release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release/
      - name: Attach assets to release
        uses: FabianKramm/release-asset-action@v1
        with:
          pattern: "release/*"
          github-token: ${{ secrets.GITHUB_TOKEN }}
  publish-images:
    if: startsWith(github.ref, 'refs/tags/v') == true
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - id: get_version
        run: |
          RELEASE_VERSION=$(echo $GITHUB_REF | sed -nE 's!refs/tags/v!!p')
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        run: |
          make docker-build TARGETARCH=amd64 IMG=ghcr.io/loft-sh/cluster-api-provider-vcluster:${{ steps.get_version.outputs.release_version }}-amd64
          make docker-build TARGETARCH=arm64 IMG=ghcr.io/loft-sh/cluster-api-provider-vcluster:${{ steps.get_version.outputs.release_version }}-arm64
          make combine-images IMG=ghcr.io/loft-sh/cluster-api-provider-vcluster:${{ steps.get_version.outputs.release_version }}
  publish-release:
    if: startsWith(github.ref, 'refs/tags/v') == true
    needs: [publish-images]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 300
      - id: get_version
        run: |
          RELEASE_VERSION=$(echo $GITHUB_REF | sed -nE 's!refs/tags/!!p')
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
      - uses: geertvdc/setup-hub@v1.0.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - run: |
          STATE=$(hub release show "$RELEASE_VERSION" --format="%S" | sed -En "s/-//p")

          EXTRA_ARGS=""

          if [ "$STATE" != "" ]; then
            EXTRA_ARGS="$EXTRA_ARGS --$STATE"
          else
            EXTRA_ARGS="$EXTRA_ARGS --prerelease=false --draft=false"
          fi

          hub release create -m "$RELEASE_VERSION" -m "" $EXTRA_ARGS "$RELEASE_VERSION" 2>/dev/null || hub release edit -m "$RELEASE_VERSION" -m "" $EXTRA_ARGS "$RELEASE_VERSION"
        env:
          RELEASE_VERSION: ${{ steps.get_version.outputs.release_version }}
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  go-install-release:
    # We do this in order to populate the Go proxy cache, which is used by CAPI to discover new provider releases
    if: startsWith(github.ref, 'refs/tags/v') == true
    needs: [publish-release]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - id: get_version
        run: |
          RELEASE_VERSION=$(echo $GITHUB_REF | sed -nE 's!refs/tags/!!p')
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: false
      - name: Run go install
        run: go install github.com/loft-sh/cluster-api-provider-vcluster@"$RELEASE_VERSION"
        env:
          RELEASE_VERSION: ${{ steps.get_version.outputs.release_version }}
